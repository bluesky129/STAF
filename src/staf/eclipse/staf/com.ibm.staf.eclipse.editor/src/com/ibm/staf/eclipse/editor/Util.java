/*****************************************************************************/
/* Software Testing Automation Framework (STAF)                              */
/* (C) Copyright IBM Corp. 2007                                              */
/*                                                                           */
/* This software is licensed under the Eclipse Public License (EPL) V1.0.    */
/*****************************************************************************/

package com.ibm.staf.eclipse.editor;

import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.MultiStatus;
import org.eclipse.core.runtime.Status;
import org.osgi.framework.Bundle;

/**
 * Utility class with static methods to aid in generating MultiStatus
 * Objects for use in logging and error reporting.
 */
public class Util
{
    /**
     * Utility method to return the plugin's product vital data. 
     * The plugin data comes from the values from the main section of the 
     * bundle's Manifest file. This method creates a Status object for the 
     * provider name, plug-in name, plug-in id, and version. Each Status 
     * object is added to the returned MultiStatus object. This method
     * should be used when the error was generated by a CoreException.
     * @param bundle The Bundle for the plugin recording an error
     * @param exception The CoreException which generated the error
     * @return MultiStatus object containing the error and plugin information
     */
    public static MultiStatus getServiceInfo(Bundle bundle, 
                                             CoreException exception)
    {   
        return getServiceInfo(bundle, exception.getStatus().getSeverity(), 
                              exception.getLocalizedMessage(), exception);
    }
    
    
    /**
     * Utility method to return the plugin's product vital data. 
     * The plugin data comes from the values from the main section of the 
     * bundle's Manifest file. This method creates a Status object for the 
     * provider name, plug-in name, plug-in id, and version. Each Status 
     * object is added to the returned MultiStatus object.
     * @param bundle The Bundle for the plugin recording an error
     * @param severity The severity of the error. Should be one of status
     * severities defined in IStatus
     * @param msg The error message
     * @param exception A Throwable that caused the problem or null if not
     * applicable
     * @return MultiStatus object containing the error and plugin information
     */
    public static MultiStatus getServiceInfo(Bundle bundle, int severity, 
                                             String msg, Throwable exception)
    {
        String symbolicName = bundle.getSymbolicName();
        Object bundleName = bundle.getHeaders().get("Bundle-Name");
        Object bundleVendor = bundle.getHeaders().get("Bundle-Vendor");
        Object bundleVersion = bundle.getHeaders().get("Bundle-Version");
        MultiStatus vitalInfoStatus = new MultiStatus(symbolicName, severity, 
                                                      msg, exception);
        
        // Put the information into their own status containers because this
        // forces new lines in the details section

        // Vendor name
        vitalInfoStatus.add(createStatus(bundle, 
                                         severity,
                                         "Plug-in Vendor: " + bundleVendor));
        // Plug-in name (user friendly name)
        vitalInfoStatus.add(createStatus(bundle,
                                         severity,
                                         "Plug-in Name: " + bundleName));
        // Plug-in ID
        vitalInfoStatus.add(createStatus(bundle,
                                         severity,
                                         "Plug-in ID: " + symbolicName));
        // Version
        vitalInfoStatus.add(createStatus(bundle,
                                         severity,
                                         "Version: " + bundleVersion));
        return vitalInfoStatus;
    }


    /**
     * Method createStatus is helper method that creates a Status object.
     * @param bundle the Bundle to create the Status for
     * @param severity error severity
     * @param msg message
     */
    protected static Status createStatus(Bundle bundle, int severity, 
                                         String msg)
    {
        Status status = new Status(severity, bundle.getSymbolicName(),
                                   IStatus.OK, msg, null);
        return status;
    }
}
